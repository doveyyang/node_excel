{
  "_args": [
    [
      {
        "raw": "xlsx-style",
        "scope": null,
        "escapedName": "xlsx-style",
        "name": "xlsx-style",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "e:\\dovey\\node_excel"
    ]
  ],
  "_cnpm_publish_time": 1464147893937,
  "_from": "xlsx-style",
  "_hasShrinkwrap": false,
  "_id": "xlsx-style@0.8.13",
  "_location": "/xlsx-style",
  "_nodeVersion": "4.1.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/xlsx-style-0.8.13.tgz_1464147892616_0.7711007765028626"
  },
  "_npmUser": {
    "name": "protobi",
    "email": "info@protobi.com"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {
    "colors": "0.6.2",
    "concat-stream": "2.0.0",
    "exit-on-epipe": "1.0.1",
    "printj": "1.1.2",
    "voc": "1.1.0"
  },
  "_requested": {
    "raw": "xlsx-style",
    "scope": null,
    "escapedName": "xlsx-style",
    "name": "xlsx-style",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "http://registry.npm.taobao.org/xlsx-style/download/xlsx-style-0.8.13.tgz",
  "_shasum": "ed238d6b8c0562f9447c2906abbded2d339e0486",
  "_shrinkwrap": null,
  "_spec": "xlsx-style",
  "_where": "e:\\dovey\\node_excel",
  "author": {
    "name": "sheetjs"
  },
  "bin": {
    "xlsx": "./bin/xlsx.njs"
  },
  "bugs": {
    "url": "https://github.com/protobi/js-xlsx/issues"
  },
  "config": {
    "blanket": {
      "pattern": "xlsx.js"
    }
  },
  "dependencies": {
    "adler-32": "",
    "cfb": ">=0.10.0",
    "codepage": "~1.3.6",
    "commander": "",
    "crc-32": "",
    "jszip": "2.4.0",
    "ssf": "~0.8.1"
  },
  "description": "Excel (XLSB/XLSX/XLSM/XLS/XML) and ODS spreadsheet parser and writer (extended to enable read/write of cell formats with xlsx files)",
  "devDependencies": {
    "cheerio": "^0.19.0",
    "mocha": "",
    "uglify-js": "",
    "xlsjs": ""
  },
  "directories": {},
  "dist": {
    "shasum": "ed238d6b8c0562f9447c2906abbded2d339e0486",
    "size": 1412933,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/xlsx-style/download/xlsx-style-0.8.13.tgz"
  },
  "engines": {
    "node": ">=0.8"
  },
  "gitHead": "c212efa91c5946656c1e914c1a42ad438d4d5dca",
  "homepage": "https://github.com/protobi/js-xlsx/tree/beta#readme",
  "keywords": [
    "excel",
    "xls",
    "xlsx",
    "xlsb",
    "xlsm",
    "ods",
    "office",
    "spreadsheet"
  ],
  "license": "Apache-2.0",
  "main": "./xlsx",
  "maintainers": [
    {
      "name": "protobi",
      "email": "info@protobi.com"
    }
  ],
  "name": "xlsx-style",
  "optionalDependencies": {},
  "publish_time": 1464147893937,
  "readme": "# xlsx-style\n\nParser and writer for various spreadsheet formats.  Pure-JS cleanroom implementation from official specifications and related documents.\n\n# About this fork\n**NOTE:** [This project](https://github.com/SheetJS/js-xlsx/tree/beta) is a fork of the original (and awesome) [SheetJS/xlsx](https://github.com/SheetJS/js-xlsx) project.\nIt is extended to enable cell formats to be read from and written to .xlsx workbooks.\nThe intent is to provide a temporary means of using these features in practice, and ultimately to merge this into the primary project.\nReport any issues to https://github.com/protobi/js-xlsx/issues.\n\nFor those contributing to this fork:\n* `master` is the main branch, which follows the original repo to enable a future pull request.\n* `beta` branch is published to npm and bower to make this fork available for use.\n\n# Supported formats\n\nSupported read formats:\n\n- Excel 2007+ XML Formats (XLSX/XLSM)\n- Excel 2007+ Binary Format (XLSB)\n- Excel 2003-2004 XML Format (XML \"SpreadsheetML\")\n- Excel 97-2004 (XLS BIFF8)\n- Excel 5.0/95 (XLS BIFF5)\n- OpenDocument Spreadsheet (ODS)\n\nSupported write formats:\n\n- XLSX\n- CSV (and general DSV)\n- JSON and JS objects (various styles)\n\nDemo: <http://oss.sheetjs.com/js-xlsx>\n\nSource: <http://git.io/xlsx>\n\n## Installation\n\nWith [npm](https://www.npmjs.org/package/xlsx-style):\n\n```sh\nnpm install xlsx-style --save\n```\n\nIn the browser:\n\n```html\n<script lang=\"javascript\" src=\"dist/xlsx.core.min.js\"></script>\n```\n\nWith [bower](http://bower.io/search/?q=js-xlsx):\n\n```sh\nbower install js-xlsx-style#beta\n```\n\nCDNjs automatically pulls the latest version and makes all versions available at\n<http://cdnjs.com/libraries/xlsx>\n\n## Optional Modules\n\nThe node version automatically requires modules for additional features.  Some\nof these modules are rather large in size and are only needed in special\ncircumstances, so they do not ship with the core.  For browser use, they must\nbe included directly:\n\n```html\n<!-- international support from https://github.com/sheetjs/js-codepage -->\n<script src=\"dist/cpexcel.js\"></script>\n<!-- ODS support -->\n<script src=\"dist/ods.js\"></script>\n```\n\nAn appropriate version for each dependency is included in the dist/ directory.\n\nThe complete single-file version is generated at `dist/xlsx.full.min.js`\n\n## ECMAScript 5 Compatibility\n\nSince xlsx.js uses ES5 functions like `Array#forEach`, older browsers require\n[Polyfills](http://git.io/QVh77g).  This repo and the gh-pages branch include\n[a shim](https://github.com/SheetJS/js-xlsx/blob/master/shim.js)\n\nTo use the shim, add the shim before the script tag that loads xlsx.js:\n\n```html\n<script type=\"text/javascript\" src=\"/path/to/shim.js\"></script>\n```\n\n## Parsing Workbooks\n\nFor parsing, the first step is to read the file.  This involves acquiring the\ndata and feeding it into the library.  Here are a few common scenarios:\n\n- node readFile:\n\n```js\nif(typeof require !== 'undefined') XLSX = require('xlsx');\nvar workbook = XLSX.readFile('test.xlsx');\n/* DO SOMETHING WITH workbook HERE */\n```\n\n- ajax (for a more complete example that works in older browsers, check the demo\n  at <http://oss.sheetjs.com/js-xlsx/ajax.html>):\n\n```js\n/* set up XMLHttpRequest */\nvar url = \"test_files/formula_stress_test_ajax.xlsx\";\nvar oReq = new XMLHttpRequest();\n\noReq.open(\"GET\", url, true);\noReq.responseType = \"arraybuffer\";\n\noReq.onload = function(e) {\n  var arraybuffer = oReq.response;\n\n  /* convert data to binary string */\n  var data = new Uint8Array(arraybuffer);\n  var arr = new Array();\n  for(var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);\n  var bstr = arr.join(\"\");\n\n  /* Call XLSX */\n  var workbook = XLSX.read(bstr, {type:\"binary\"});\n\n  /* DO SOMETHING WITH workbook HERE */\n}\n\noReq.send();\n```\n\n- HTML5 drag-and-drop using readAsBinaryString:\n\n```js\n/* set up drag-and-drop event */\nfunction handleDrop(e) {\n  e.stopPropagation();\n  e.preventDefault();\n  var files = e.dataTransfer.files;\n  var i, f;\n  \n  for (i = 0, f = files[i]; i != files.length; ++i) {\n    var reader = new FileReader();\n    var name = f.name;\n    reader.onload = function(e) {\n      var data = e.target.result;\n\n      /* if binary string, read with type 'binary' */\n      var workbook = XLSX.read(data, {type: 'binary'});\n\n      /* DO SOMETHING WITH workbook HERE */\n    };\n    reader.readAsBinaryString(f);\n  }\n}\ndrop_dom_element.addEventListener('drop', handleDrop, false);\n```\n\n- HTML5 input file element using readAsBinaryString:\n\n```js\nfunction handleFile(e) {\n  var files = e.target.files;\n  var i, f;\n  \n  for (i = 0, f = files[i]; i != files.length; ++i) {\n    var reader = new FileReader();\n    var name = f.name;\n    reader.onload = function(e) {\n      var data = e.target.result;\n\n      var workbook = XLSX.read(data, {type: 'binary'});\n\n      /* DO SOMETHING WITH workbook HERE */\n    };\n    reader.readAsBinaryString(f);\n  }\n}\ninput_dom_element.addEventListener('change', handleFile, false);\n```\n\n## Working with the Workbook\n\nThe full object format is described later in this README.\n\nThis example extracts the value stored in cell A1 from the first worksheet:\n\n```js\nvar first_sheet_name = workbook.SheetNames[0];\nvar address_of_cell = 'A1';\n\n/* Get worksheet */\nvar worksheet = workbook.Sheets[first_sheet_name];\n\n/* Find desired cell */\nvar desired_cell = worksheet[address_of_cell];\n\n/* Get the value */\nvar desired_value = desired_cell.v;\n```\n\nThis example iterates through every nonempty of every sheet and dumps values:\n\n```js\nvar sheet_name_list = workbook.SheetNames;\n\nsheet_name_list.forEach(function(y) { /* iterate through sheets */\n  var worksheet = workbook.Sheets[y];\n  for (z in worksheet) {\n    /* all keys that do not begin with \"!\" correspond to cell addresses */\n    if(z[0] === '!') continue;\n    console.log(y + \"!\" + z + \"=\" + JSON.stringify(worksheet[z].v));\n  }\n});\n```\n\nComplete examples:\n\n- <http://oss.sheetjs.com/js-xlsx/> HTML5 File API / Base64 Text / Web Workers\n\nNote that older versions of IE does not support HTML5 File API, so the base64\nmode is provided for testing.  On OSX you can get the base64 encoding with:\n\n```sh\n$ <target_file.xlsx base64 | pbcopy\n```\n\n- <http://oss.sheetjs.com/js-xlsx/ajax.html> XMLHttpRequest\n\n- <https://github.com/SheetJS/js-xlsx/blob/master/bin/xlsx.njs> node\n\nThe node version installs a command line tool `xlsx` which can read spreadsheet\nfiles and output the contents in various formats.  The source is available at\n`xlsx.njs` in the bin directory.\n\nSome helper functions in `XLSX.utils` generate different views of the sheets:\n\n- `XLSX.utils.sheet_to_csv` generates CSV\n- `XLSX.utils.sheet_to_json` generates an array of objects\n- `XLSX.utils.sheet_to_formulae` generates a list of formulae\n\n## Writing Workbooks\n\nFor writing, the first step is to generate output data.  The helper functions\n`write` and `writeFile` will produce the data in various formats suitable for\ndissemination.  The second step is to actual share the data with the end point.\nAssuming `workbook` is a workbook object:\n\n- nodejs write to file:\n\n```js\n/* output format determined by filename */\nXLSX.writeFile(workbook, 'out.xlsx');\n/* at this point, out.xlsx is a file that you can distribute */\n```\n\n- write to binary string (using FileSaver.js):\n\n```js\n/* bookType can be 'xlsx' or 'xlsm' or 'xlsb' */\nvar wopts = { bookType:'xlsx', bookSST:false, type:'binary' };\n\nvar wbout = XLSX.write(workbook,wopts);\n\nfunction s2ab(s) {\n  var buf = new ArrayBuffer(s.length);\n  var view = new Uint8Array(buf);\n  for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n  return buf;\n}\n\n/* the saveAs call downloads a file on the local machine */\nsaveAs(new Blob([s2ab(wbout)],{type:\"\"}), \"test.xlsx\")\n```\n\nComplete examples:\n\n- <http://sheetjs.com/demos/writexlsx.html> generates a simple file\n- <http://git.io/WEK88Q> writing an array of arrays in nodejs\n- <http://sheetjs.com/demos/table.html> exporting an HTML table\n\n## Interface\n\n`XLSX` is the exposed variable in the browser and the exported node variable\n\n`XLSX.version` is the version of the library (added by the build script).\n\n`XLSX.SSF` is an embedded version of the [format library](http://git.io/ssf).\n\n### Parsing functions\n\n`XLSX.read(data, read_opts)` attempts to parse `data`.\n\n`XLSX.readFile(filename, read_opts)` attempts to read `filename` and parse.\n\n### Writing functions\n\n`XLSX.write(wb, write_opts)` attempts to write the workbook `wb`\n\n`XLSX.writeFile(wb, filename, write_opts)` attempts to write `wb` to `filename`\n\n### Utilities\n\nUtilities are available in the `XLSX.utils` object:\n\nExporting:\n\n- `sheet_to_json` converts a workbook object to an array of JSON objects.\n- `sheet_to_csv` generates delimiter-separated-values output\n- `sheet_to_formulae` generates a list of the formulae (with value fallbacks)\n\nCell and cell address manipulation:\n\n- `format_cell` generates the text value for a cell (using number formats)\n- `{en,de}code_{row,col}` convert between 0-indexed rows/cols and A1 forms.\n- `{en,de}code_cell` converts cell addresses\n- `{en,de}code_range` converts cell ranges\n\n## Workbook / Worksheet / Cell Object Description\n\njs-xlsx conforms to the Common Spreadsheet Format (CSF):\n\n### General Structures\n\nCell address objects are stored as `{c:C, r:R}` where `C` and `R` are 0-indexed\ncolumn and row numbers, respectively.  For example, the cell address `B5` is\nrepresented by the object `{c:1, r:4}`.\n\nCell range objects are stored as `{s:S, e:E}` where `S` is the first cell and\n`E` is the last cell in the range.  The ranges are inclusive.  For example, the\nrange `A3:B7` is represented by the object `{s:{c:0, r:2}, e:{c:1, r:6}}`. Utils\nuse the following pattern to walk each of the cells in a range:\n\n```js\nfor(var R = range.s.r; R <= range.e.r; ++R) {\n  for(var C = range.s.c; C <= range.e.c; ++C) {\n    var cell_address = {c:C, r:R};\n  }\n}\n```\n\n### Cell Object\n\n| Key | Description |\n| --- | ----------- |\n| `v` | raw value (see Data Types section for more info) |\n| `w` | formatted text (if applicable) |\n| `t` | cell type: `b` Boolean, `n` Number, `e` error, `s` String, `d` Date |\n| `f` | cell formula (if applicable) |\n| `r` | rich text encoding (if applicable) |\n| `h` | HTML rendering of the rich text (if applicable) |\n| `c` | comments associated with the cell ** |\n| `z` | number format string associated with the cell (if requested) |\n| `l` | cell hyperlink object (.Target holds link, .tooltip is tooltip) |\n| `s` | the style/theme of the cell (if applicable) |\n\nBuilt-in export utilities (such as the CSV exporter) will use the `w` text if it\nis available.  To change a value, be sure to delete `cell.w` (or set it to\n`undefined`) before attempting to export.  The utilities will regenerate the `w`\ntext from the number format (`cell.z`) and the raw value if possible.\n\n**Note**: The .z attribute is now deprecated.  Use the `.s` attribute to specify cell styles including number formats.\nTo specify a number format, use `s.numFmt`, e.g. `{v: 42145.822, s: { numFmt: \"m/dd/yy\"}}` described below.\n\n### Data Types\n\nThe raw value is stored in the `v` field, interpreted based on the `t` field.\n\nType `b` is the Boolean type.  `v` is interpreted according to JS truth tables\n\nType `e` is the Error type. `v` holds the number and `w` holds the common name:\n\n| Value | Error Meaning |\n| ----: | :------------ |\n|  0x00 | #NULL!        |\n|  0x07 | #DIV/0!       |\n|  0x0F | #VALUE!       |\n|  0x17 | #REF!         |\n|  0x1D | #NAME?        |\n|  0x24 | #NUM!         |\n|  0x2A | #N/A          |\n|  0x2B | #GETTING_DATA |\n\nType `n` is the Number type. This includes all forms of data that Excel stores\nas numbers, such as dates/times and Boolean fields.  Excel exclusively uses data\nthat can be fit in an IEEE754 floating point number, just like JS Number, so the\n`v` field holds the raw number.  The `w` field holds formatted text.\n\nType `d` is the Date type, generated only when the option `cellDates` is passed.\nSince JSON does not have a natural Date type, parsers are generally expected to\nstore ISO 8601 Date strings like you would get from `date.toISOString()`.  On\nthe other hand, writers and exporters should be able to handle date strings and\nJS Date objects.  Note that Excel disregards the timezone modifier and treats all\ndates in the local timezone.  js-xlsx does not correct for this error.\n\nType `s` is the String type.  `v` should be explicitly stored as a string to\navoid possible confusion.\n\n\n### Worksheet Object\n\nEach key that does not start with `!` maps to a cell (using `A-1` notation)\n\n`worksheet[address]` returns the cell object for the specified address.\n\nSpecial worksheet keys (accessible as `worksheet[key]`, each starting with `!`):\n\n- `ws['!ref']`: A-1 based range representing the worksheet range. Functions that\n  work with sheets should use this parameter to determine the range.  Cells that\n  are assigned outside of the range are not processed.  In particular, when\n  writing a worksheet by hand, be sure to update the range.  For a longer\n  discussion, see <http://git.io/KIaNKQ>\n\n  Functions that handle worksheets should test for the presence of `!ref` field.\n  If the `!ref` is omitted or is not a valid range, functions are free to treat\n  the sheet as empty or attempt to guess the range.  The standard utilities that\n  ship with this library treat sheets as empty (for example, the CSV output is an\n  empty string).\n\n  When reading a worksheet with the `sheetRows` property set, the ref parameter\n  will use the restricted range.  The original range is set at `ws['!fullref']`\n\n- `ws['!cols']`: array of column properties objects.  Column widths are actually\n  stored in files in a normalized manner, measured in terms of the \"Maximum\n  Digit Width\" (the largest width of the rendered digits 0-9, in pixels).  When\n  parsed, the column objects store the pixel width in the `wpx` field, character\n  width in the `wch` field, and the maximum digit width in the `MDW` field.\n\n- `ws['!merges']`: array of range objects corresponding to the merged cells in\n  the worksheet.  Plaintext utilities are unaware of merge cells.  CSV export\n  will write all cells in the merge range if they exist, so be sure that only\n  the first cell (upper-left) in the range is set.\n\n- `ws['!printHeader']`:  array of row indices for repeating row headers on print, e.g. `[1:1]` to repeat just the first row.\n\nThe following properties are currently used when generating an XLSX file, but not yet parsed:\n\n- `ws['!rowBreaks']`: array of row break points, e.g. `[16,32]`\n- `ws['!colBreaks']`: array of col break points, e.g. `[8,16]`\n- `ws['!pageSetup']`: `{scale: '100', orientation: 'portrait'||'landscape'}\n\n\n### Workbook Object\n\n`workbook.SheetNames` is an ordered list of the sheets in the workbook\n\n`wb.Sheets[sheetname]` returns an object representing the worksheet.\n\n`wb.Props` is an object storing the standard properties.  The following properties are currently used when\ngenerating an XLSX file, but not yet parsed:\n    - `title`\n    - `subject`\n    - `description`\n    - `keywords`\n    - `creator`\n\n`wb.Custprops` stores custom properties.  Since the XLS standard properties deviate from the XLSX\nstandard, XLS parsing stores core properties in both places.  .\n\n\n## Parsing Options\n\nThe exported `read` and `readFile` functions accept an options argument:\n\n| Option Name | Default | Description |\n| :---------- | ------: | :---------- |\n| cellFormula | true    | Save formulae to the .f field ** |\n| cellHTML    | true    | Parse rich text and save HTML to the .h field |\n| cellNF      | false   | Save number format string to the .z field |\n| cellStyles  | false   | Save style/theme info to the .s field |\n| cellDates   | false   | Store dates as type `d` (default is `n`) ** |\n| sheetStubs  | false   | Create cell objects for stub cells |\n| sheetRows   | 0       | If >0, read the first `sheetRows` rows ** |\n| bookDeps    | false   | If true, parse calculation chains |\n| bookFiles   | false   | If true, add raw files to book object ** |\n| bookProps   | false   | If true, only parse enough to get book metadata ** |\n| bookSheets  | false   | If true, only parse enough to get the sheet names |\n| bookVBA     | false   | If true, expose vbaProject.bin to `vbaraw` field ** |\n| password    | \"\"      | If defined and file is encrypted, use password ** |\n\n- `cellFormula` option only applies to formats that require extra processing to\n  parse formulae (XLS/XLSB).\n- Even if `cellNF` is false, formatted text will be generated and saved to `.w`\n- In some cases, sheets may be parsed even if `bookSheets` is false.\n- `bookSheets` and `bookProps` combine to give both sets of information\n- `Deps` will be an empty object if `bookDeps` is falsy\n- `bookFiles` behavior depends on file type:\n    * `keys` array (paths in the ZIP) for ZIP-based formats\n    * `files` hash (mapping paths to objects representing the files) for ZIP\n    * `cfb` object for formats using CFB containers\n- `sheetRows-1` rows will be generated when looking at the JSON object output\n  (since the header row is counted as a row when parsing the data)\n- `bookVBA` merely exposes the raw vba object.  It does not parse the data.\n- `cellDates` currently does not convert numerical dates to JS dates.\n- Currently only XOR encryption is supported.  Unsupported error will be thrown\n  for files employing other encryption methods.\n\nThe defaults are enumerated in bits/84_defaults.js\n\n## Writing Options\n\nThe exported `write` and `writeFile` functions accept an options argument:\n\n| Option Name | Default | Description |\n| :---------- | ------: | :---------- |\n| cellDates   | false   | Store dates as type `d` (default is `n`) |\n| bookSST     | false   | Generate Shared String Table ** |\n| bookType    | 'xlsx'  | Type of Workbook (\"xlsx\" or \"xlsm\" or \"xlsb\") |\n| showGridLines | true | Show gridlines on all pages  |\n| tabSelected | '1' | Initial tab selected |\n| Props       | null | Workbook properties |\n\n\n\n\n- `bookSST` is slower and more memory intensive, but has better compatibility\n  with older versions of iOS Numbers\n- `bookType = 'xlsb'` is stubbed and far from complete\n- The raw data is the only thing guaranteed to be saved.  Formulae, formatting,\n  and other niceties may not be serialized (pending CSF standardization)\n- `cellDates` only applies to XLSX output and is not guaranteed to work with\n  third-party readers.  Excel itself does not usually write cells with type `d`\n  so non-Excel tools may ignore the data or blow up in the presence of dates.\n- showGridLines and tabSelected are currently used when generating an XLSX file but not yet parse.\n- Props specifies workbook properties\n   \n\n\n\n## Cell Styles\n\nCell styles are specified by a style object that roughly parallels the OpenXML structure.  The style object has five\ntop-level attributes: `fill`, `font`, `numFmt`, `alignment`, and `border`.\n\n\n| Style Attribute | Sub Attributes | Values |\n| :-------------- | :------------- | :------------- | :----- |\n| fill            | patternType    |  `\"solid\"` or `\"none\"` |\n|                 | fgColor        |  `COLOR_SPEC`\n|                 | bgColor        |  `COLOR_SPEC`\n| font            | name           |  `\"Calibri\"` // default\n|                 | sz             |  `\"11\"` // font size in points\n|                 | color          |  `COLOR_SPEC`\n|                 | bold           |  `true || false`\n|                 | underline      |  `true || false`\n|                 | italic         |  `true || false`\n|                 | strike         |  `true || false`\n|                 | outline        |  `true || false`\n|                 | shadow         |  `true || false`\n|                 | vertAlign      |  `true || false`\n| numFmt          |                |  `\"0\"`  // integer index to built in formats, see StyleBuilder.SSF property\n|                 |                |  `\"0.00%\"` // string matching a built-in format, see StyleBuilder.SSF\n|                 |                |  `\"0.0%\"`  // string specifying a custom format\n|                 |                |  `\"0.00%;\\\\(0.00%\\\\);\\\\-;@\"` // string specifying a custom format, escaping special characters\n|                 |                |  `\"m/dd/yy\"` // string a date format using Excel's format notation\n| alignment       | vertical       | `\"bottom\"||\"center\"||\"top\"`\n|                 | horizontal     | `\"bottom\"||\"center\"||\"top\"`\n|                 | wrapText       |  `true || false`\n|                 | readingOrder   |  `2` // for right-to-left\n|                 | textRotation   | Number from `0` to `180` or `255` (default is `0`)\n|                 |                |  `90` is rotated up 90 degrees\n|                 |                |  `45` is rotated up 45 degrees\n|                 |                | `135` is rotated down 45 degrees \n|                 |                | `180` is rotated down 180 degrees\n|                 |                | `255` is special,  aligned vertically\n| border          | top            | `{ style: BORDER_STYLE, color: COLOR_SPEC }`\n|                 | bottom         | `{ style: BORDER_STYLE, color: COLOR_SPEC }`\n|                 | left           | `{ style: BORDER_STYLE, color: COLOR_SPEC }`\n|                 | right          | `{ style: BORDER_STYLE, color: COLOR_SPEC }`\n|                 | diagonal       | `{ style: BORDER_STYLE, color: COLOR_SPEC }`\n|                 | diagonalUp     | `true||false`\n|                 | diagonalDown   | `true||false`\n\n\n**COLOR_SPEC**: Colors for `fill`, `font`, and `border` are specified as objects, either:\n* `{ auto: 1}` specifying automatic values\n* `{ rgb: \"FFFFAA00\" }` specifying a hex ARGB value\n* `{ theme: \"1\", tint: \"-0.25\"}` specifying an integer index to a theme color and a tint value (default 0)\n* `{ indexed: 64}` default value for `fill.bgColor`\n\n**BORDER_STYLE**: Border style is a string value which may take on one of the following values:\n * `thin`\n * `medium`\n * `thick`\n * `dotted`\n * `hair`\n * `dashed`\n * `mediumDashed`\n * `dashDot`\n * `mediumDashDot`\n * `dashDotDot`\n * `mediumDashDotDot`\n * `slantDashDot`\n\n\nBorders for merged areas are specified for each cell within the merged area.  So to apply a box border to a merged area of 3x3 cells, border styles would need to be specified for eight different cells:\n* left borders for the three cells on the left,\n* right borders for the cells on the right\n* top borders for the cells on the top\n* bottom borders for the cells on the left\n\n\n\n## Tested Environments\n\n - NodeJS 0.8, 0.10 (latest release), 0.11.14 (unstable), io.js\n - IE 6/7/8/9/10/11 using Base64 mode (IE10/11 using HTML5 mode)\n - FF 18 using Base64 or HTML5 mode\n - Chrome 24 using Base64 or HTML5 mode\n\nTests utilize the mocha testing framework.  Travis-CI and Sauce Labs links:\n\n - <https://travis-ci.org/SheetJS/js-xlsx> for XLSX module in nodejs\n - <https://travis-ci.org/SheetJS/SheetJS.github.io> for XLS* modules\n - <https://saucelabs.com/u/sheetjs> for XLS* modules using Sauce Labs\n\n## Test Files\n\nTest files are housed in [another repo](https://github.com/SheetJS/test_files).\n\nRunning `make init` will refresh the `test_files` submodule and get the files.\n\n## Testing\n\n`make test` will run the node-based tests.  To run the in-browser tests, clone\n[the oss.sheetjs.com repo](https://github.com/SheetJS/SheetJS.github.io) and\nreplace the xlsx.js file (then fire up the browser and go to `stress.html`):\n\n```sh\n$ cp xlsx.js ../SheetJS.github.io\n$ cd ../SheetJS.github.io\n$ simplehttpserver # or \"python -mSimpleHTTPServer\" or \"serve\"\n$ open -a Chromium.app http://localhost:8000/stress.html\n```\n\nFor a much smaller test, run `make test_misc`.\n\n## Contributing\n\nDue to the precarious nature of the Open Specifications Promise, it is very\nimportant to ensure code is cleanroom.  Consult CONTRIBUTING.md\n\nThe xlsx.js file is constructed from the files in the `bits` subdirectory. The\nbuild script (run `make`) will concatenate the individual bits to produce the\nscript.  Before submitting a contribution, ensure that running make will produce\nthe xlsx.js file exactly.  The simplest way to test is to move the script:\n\n```sh\n$ mv xlsx.js xlsx.new.js\n$ make\n$ diff xlsx.js xlsx.new.js\n```\n\nTo produce the dist files, run `make dist`.  The dist files are updated in each\nversion release and should not be committed between versions.\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\nIt is the opinion of the Original Author that this code conforms to the terms of\nthe Microsoft Open Specifications Promise, falling under the same terms as\nOpenOffice (which is governed by the Apache License v2).  Given the vagaries of\nthe promise, the Original Author makes no legal claim that in fact end users are\nprotected from future actions.  It is highly recommended that, for commercial\nuses, you consult a lawyer before proceeding.\n\n## References\n\nISO/IEC 29500:2012(E) \"Information technology — Document description and processing languages — Office Open XML File Formats\"\n\nOSP-covered specifications:\n\n - [MS-XLSB]: Excel (.xlsb) Binary File Format\n - [MS-XLSX]: Excel (.xlsx) Extensions to the Office Open XML SpreadsheetML File Format\n - [MS-OE376]: Office Implementation Information for ECMA-376 Standards Support\n - [MS-CFB]: Compound File Binary File Format\n - [MS-XLS]: Excel Binary File Format (.xls) Structure Specification\n - [MS-ODATA]: Open Data Protocol (OData)\n - [MS-OFFCRYPTO]: Office Document Cryptography Structure\n - [MS-OLEDS]: Object Linking and Embedding (OLE) Data Structures\n - [MS-OLEPS]: Object Linking and Embedding (OLE) Property Set Data Structures\n - [MS-OSHARED]: Office Common Data Types and Objects Structures\n - [MS-OVBA]: Office VBA File Format Structure\n - [MS-CTXLS]: Excel Custom Toolbar Binary File Format\n - [MS-XLDM]: Spreadsheet Data Model File Format\n - [MS-EXSPXML3]: Excel Calculation Version 2 Web Service XML Schema\n - [XLS]: Microsoft Office Excel 97-2007 Binary File Format Specification\n\nOpen Document Format for Office Applications Version 1.2 (29 September 2011)\n\n\n## Badges\n\n[![Build Status](https://travis-ci.org/SheetJS/js-xlsx.svg?branch=master)](https://travis-ci.org/SheetJS/js-xlsx)\n\n[![Coverage Status](http://img.shields.io/coveralls/SheetJS/js-xlsx/master.svg)](https://coveralls.io/r/SheetJS/js-xlsx?branch=master)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/protobi/js-xlsx.git#beta"
  },
  "scripts": {
    "pretest": "git submodule init && git submodule update",
    "test": "make test"
  },
  "version": "0.8.13"
}
